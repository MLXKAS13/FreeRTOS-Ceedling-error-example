ARM GAS  /tmp/ccUIlO01.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"main.c"
  13              		.section	.rodata
  14              		.align	2
  15              	.LC0:
  16 0000 64656661 		.ascii	"defaultTask\000"
  16      756C7454 
  16      61736B00 
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.comm	defaultTaskHandle,4,4
  21              		.section	.rodata
  22              		.align	2
  23              	.LC2:
  24 000c 00000000 		.word	.LC0
  25 0010 00000000 		.word	StartDefaultTask
  26 0014 0000     		.short	0
  27 0016 0000     		.space	2
  28 0018 00000000 		.word	0
  29 001c 80000000 		.word	128
  30 0020 00000000 		.word	0
  31 0024 00000000 		.word	0
  32              		.section	.text.main,"ax",%progbits
  33              		.align	1
  34              		.global	main
  35              		.arch armv7e-m
  36              		.syntax unified
  37              		.thumb
  38              		.thumb_func
  39              		.fpu fpv5-d16
  41              	main:
  42              	.LFB146:
  43              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/main.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
ARM GAS  /tmp/ccUIlO01.s 			page 2


  14:Core/Src/main.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                             www.st.com/SLA0044
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "cmsis_os.h"
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** #include "system.h"
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* USER CODE END PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** osThreadId defaultTaskHandle;
  46:Core/Src/main.c **** /* USER CODE BEGIN PV */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE END PV */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  51:Core/Src/main.c **** void SystemClock_Config(void);
  52:Core/Src/main.c **** static void MX_GPIO_Init(void);
  53:Core/Src/main.c **** void StartDefaultTask(void const * argument);
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* USER CODE END PFP */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  60:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* USER CODE END 0 */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /**
  65:Core/Src/main.c ****   * @brief  The application entry point.
  66:Core/Src/main.c ****   * @retval int
  67:Core/Src/main.c ****   */
  68:Core/Src/main.c **** int main(void)
  69:Core/Src/main.c **** {
  44              		.loc 1 69 1
ARM GAS  /tmp/ccUIlO01.s 			page 3


  45              		.cfi_startproc
  46              		@ args = 0, pretend = 0, frame = 32
  47              		@ frame_needed = 1, uses_anonymous_args = 0
  48 0000 B0B5     		push	{r4, r5, r7, lr}
  49              	.LCFI0:
  50              		.cfi_def_cfa_offset 16
  51              		.cfi_offset 4, -16
  52              		.cfi_offset 5, -12
  53              		.cfi_offset 7, -8
  54              		.cfi_offset 14, -4
  55 0002 88B0     		sub	sp, sp, #32
  56              	.LCFI1:
  57              		.cfi_def_cfa_offset 48
  58 0004 00AF     		add	r7, sp, #0
  59              	.LCFI2:
  60              		.cfi_def_cfa_register 7
  70:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  71:Core/Src/main.c **** 
  72:Core/Src/main.c ****   /* USER CODE END 1 */
  73:Core/Src/main.c **** 
  74:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  75:Core/Src/main.c **** 
  76:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  77:Core/Src/main.c ****   HAL_Init();
  61              		.loc 1 77 3
  62 0006 FFF7FEFF 		bl	HAL_Init
  78:Core/Src/main.c **** 
  79:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  80:Core/Src/main.c **** 
  81:Core/Src/main.c ****   /* USER CODE END Init */
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   /* Configure the system clock */
  84:Core/Src/main.c ****   SystemClock_Config();
  63              		.loc 1 84 3
  64 000a FFF7FEFF 		bl	SystemClock_Config
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* USER CODE END SysInit */
  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* Initialize all configured peripherals */
  91:Core/Src/main.c ****   MX_GPIO_Init();
  65              		.loc 1 91 3
  66 000e FFF7FEFF 		bl	MX_GPIO_Init
  92:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* USER CODE END 2 */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
  97:Core/Src/main.c ****   /* add mutexes, ... */
  98:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 101:Core/Src/main.c ****   /* add semaphores, ... */
 102:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
ARM GAS  /tmp/ccUIlO01.s 			page 4


 105:Core/Src/main.c ****   /* start timers, add new ones, ... */
 106:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 109:Core/Src/main.c ****   /* add queues, ... */
 110:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****   /* Create the thread(s) */
 113:Core/Src/main.c ****   /* definition and creation of defaultTask */
 114:Core/Src/main.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  67              		.loc 1 114 3
  68 0012 0A4B     		ldr	r3, .L3
  69 0014 3C1D     		adds	r4, r7, #4
  70 0016 1D46     		mov	r5, r3
  71 0018 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
  72 001a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
  73 001c 95E80700 		ldm	r5, {r0, r1, r2}
  74 0020 84E80700 		stm	r4, {r0, r1, r2}
 115:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
  75              		.loc 1 115 23
  76 0024 3B1D     		adds	r3, r7, #4
  77 0026 0021     		movs	r1, #0
  78 0028 1846     		mov	r0, r3
  79 002a FFF7FEFF 		bl	osThreadCreate
  80 002e 0346     		mov	r3, r0
  81              		.loc 1 115 21
  82 0030 034A     		ldr	r2, .L3+4
  83 0032 1360     		str	r3, [r2]
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 118:Core/Src/main.c ****   /* add threads, ... */
 119:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   /* Start scheduler */
 122:Core/Src/main.c ****   osKernelStart();
  84              		.loc 1 122 3
  85 0034 FFF7FEFF 		bl	osKernelStart
  86              	.L2:
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 125:Core/Src/main.c ****   /* Infinite loop */
 126:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 127:Core/Src/main.c ****   while (1)
  87              		.loc 1 127 9 discriminator 1
  88 0038 FEE7     		b	.L2
  89              	.L4:
  90 003a 00BF     		.align	2
  91              	.L3:
  92 003c 0C000000 		.word	.LC2
  93 0040 00000000 		.word	defaultTaskHandle
  94              		.cfi_endproc
  95              	.LFE146:
  97              		.section	.text.SystemClock_Config,"ax",%progbits
  98              		.align	1
  99              		.global	SystemClock_Config
 100              		.syntax unified
 101              		.thumb
ARM GAS  /tmp/ccUIlO01.s 			page 5


 102              		.thumb_func
 103              		.fpu fpv5-d16
 105              	SystemClock_Config:
 106              	.LFB147:
 128:Core/Src/main.c ****   {
 129:Core/Src/main.c ****     /* USER CODE END WHILE */
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 132:Core/Src/main.c ****   }
 133:Core/Src/main.c ****   /* USER CODE END 3 */
 134:Core/Src/main.c **** }
 135:Core/Src/main.c **** 
 136:Core/Src/main.c **** /**
 137:Core/Src/main.c ****   * @brief System Clock Configuration
 138:Core/Src/main.c ****   * @retval None
 139:Core/Src/main.c ****   */
 140:Core/Src/main.c **** void SystemClock_Config(void)
 141:Core/Src/main.c **** {
 107              		.loc 1 141 1
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 80
 110              		@ frame_needed = 1, uses_anonymous_args = 0
 111 0000 80B5     		push	{r7, lr}
 112              	.LCFI3:
 113              		.cfi_def_cfa_offset 8
 114              		.cfi_offset 7, -8
 115              		.cfi_offset 14, -4
 116 0002 94B0     		sub	sp, sp, #80
 117              	.LCFI4:
 118              		.cfi_def_cfa_offset 88
 119 0004 00AF     		add	r7, sp, #0
 120              	.LCFI5:
 121              		.cfi_def_cfa_register 7
 142:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 122              		.loc 1 142 22
 123 0006 07F11C03 		add	r3, r7, #28
 124 000a 3422     		movs	r2, #52
 125 000c 0021     		movs	r1, #0
 126 000e 1846     		mov	r0, r3
 127 0010 FFF7FEFF 		bl	memset
 143:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 128              		.loc 1 143 22
 129 0014 07F10803 		add	r3, r7, #8
 130 0018 0022     		movs	r2, #0
 131 001a 1A60     		str	r2, [r3]
 132 001c 5A60     		str	r2, [r3, #4]
 133 001e 9A60     		str	r2, [r3, #8]
 134 0020 DA60     		str	r2, [r3, #12]
 135 0022 1A61     		str	r2, [r3, #16]
 136              	.LBB4:
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 146:Core/Src/main.c ****   */
 147:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 137              		.loc 1 147 3
 138 0024 2A4B     		ldr	r3, .L10
 139 0026 1B6C     		ldr	r3, [r3, #64]
ARM GAS  /tmp/ccUIlO01.s 			page 6


 140 0028 294A     		ldr	r2, .L10
 141 002a 43F08053 		orr	r3, r3, #268435456
 142 002e 1364     		str	r3, [r2, #64]
 143 0030 274B     		ldr	r3, .L10
 144 0032 1B6C     		ldr	r3, [r3, #64]
 145 0034 03F08053 		and	r3, r3, #268435456
 146 0038 7B60     		str	r3, [r7, #4]
 147 003a 7B68     		ldr	r3, [r7, #4]
 148              	.LBE4:
 149              	.LBB5:
 148:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 150              		.loc 1 148 3
 151 003c 254B     		ldr	r3, .L10+4
 152 003e 1B68     		ldr	r3, [r3]
 153 0040 244A     		ldr	r2, .L10+4
 154 0042 43F44043 		orr	r3, r3, #49152
 155 0046 1360     		str	r3, [r2]
 156 0048 224B     		ldr	r3, .L10+4
 157 004a 1B68     		ldr	r3, [r3]
 158 004c 03F44043 		and	r3, r3, #49152
 159 0050 3B60     		str	r3, [r7]
 160 0052 3B68     		ldr	r3, [r7]
 161              	.LBE5:
 149:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 150:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 151:Core/Src/main.c ****   */
 152:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 162              		.loc 1 152 36
 163 0054 0223     		movs	r3, #2
 164 0056 FB61     		str	r3, [r7, #28]
 153:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 165              		.loc 1 153 30
 166 0058 0123     		movs	r3, #1
 167 005a BB62     		str	r3, [r7, #40]
 154:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 168              		.loc 1 154 41
 169 005c 1023     		movs	r3, #16
 170 005e FB62     		str	r3, [r7, #44]
 155:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 171              		.loc 1 155 34
 172 0060 0223     		movs	r3, #2
 173 0062 7B63     		str	r3, [r7, #52]
 156:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 174              		.loc 1 156 35
 175 0064 0023     		movs	r3, #0
 176 0066 BB63     		str	r3, [r7, #56]
 157:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 177              		.loc 1 157 30
 178 0068 0823     		movs	r3, #8
 179 006a FB63     		str	r3, [r7, #60]
 158:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 216;
 180              		.loc 1 158 30
 181 006c D823     		movs	r3, #216
 182 006e 3B64     		str	r3, [r7, #64]
 159:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 183              		.loc 1 159 30
 184 0070 0223     		movs	r3, #2
ARM GAS  /tmp/ccUIlO01.s 			page 7


 185 0072 7B64     		str	r3, [r7, #68]
 160:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 186              		.loc 1 160 30
 187 0074 0223     		movs	r3, #2
 188 0076 BB64     		str	r3, [r7, #72]
 161:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 189              		.loc 1 161 7
 190 0078 07F11C03 		add	r3, r7, #28
 191 007c 1846     		mov	r0, r3
 192 007e FFF7FEFF 		bl	HAL_RCC_OscConfig
 193 0082 0346     		mov	r3, r0
 194              		.loc 1 161 6
 195 0084 002B     		cmp	r3, #0
 196 0086 01D0     		beq	.L6
 162:Core/Src/main.c ****   {
 163:Core/Src/main.c ****     Error_Handler();
 197              		.loc 1 163 5
 198 0088 FFF7FEFF 		bl	Error_Handler
 199              	.L6:
 164:Core/Src/main.c ****   }
 165:Core/Src/main.c ****   /** Activate the Over-Drive mode
 166:Core/Src/main.c ****   */
 167:Core/Src/main.c ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 200              		.loc 1 167 7
 201 008c FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 202 0090 0346     		mov	r3, r0
 203              		.loc 1 167 6
 204 0092 002B     		cmp	r3, #0
 205 0094 01D0     		beq	.L7
 168:Core/Src/main.c ****   {
 169:Core/Src/main.c ****     Error_Handler();
 206              		.loc 1 169 5
 207 0096 FFF7FEFF 		bl	Error_Handler
 208              	.L7:
 170:Core/Src/main.c ****   }
 171:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 172:Core/Src/main.c ****   */
 173:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 209              		.loc 1 173 31
 210 009a 0F23     		movs	r3, #15
 211 009c BB60     		str	r3, [r7, #8]
 174:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 175:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 212              		.loc 1 175 34
 213 009e 0223     		movs	r3, #2
 214 00a0 FB60     		str	r3, [r7, #12]
 176:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 215              		.loc 1 176 35
 216 00a2 0023     		movs	r3, #0
 217 00a4 3B61     		str	r3, [r7, #16]
 177:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 218              		.loc 1 177 36
 219 00a6 4FF4C053 		mov	r3, #6144
 220 00aa 7B61     		str	r3, [r7, #20]
 178:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 221              		.loc 1 178 36
 222 00ac 4FF48053 		mov	r3, #4096
ARM GAS  /tmp/ccUIlO01.s 			page 8


 223 00b0 BB61     		str	r3, [r7, #24]
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 224              		.loc 1 180 7
 225 00b2 07F10803 		add	r3, r7, #8
 226 00b6 0721     		movs	r1, #7
 227 00b8 1846     		mov	r0, r3
 228 00ba FFF7FEFF 		bl	HAL_RCC_ClockConfig
 229 00be 0346     		mov	r3, r0
 230              		.loc 1 180 6
 231 00c0 002B     		cmp	r3, #0
 232 00c2 01D0     		beq	.L9
 181:Core/Src/main.c ****   {
 182:Core/Src/main.c ****     Error_Handler();
 233              		.loc 1 182 5
 234 00c4 FFF7FEFF 		bl	Error_Handler
 235              	.L9:
 183:Core/Src/main.c ****   }
 184:Core/Src/main.c **** }
 236              		.loc 1 184 1
 237 00c8 00BF     		nop
 238 00ca 5037     		adds	r7, r7, #80
 239              	.LCFI6:
 240              		.cfi_def_cfa_offset 8
 241 00cc BD46     		mov	sp, r7
 242              	.LCFI7:
 243              		.cfi_def_cfa_register 13
 244              		@ sp needed
 245 00ce 80BD     		pop	{r7, pc}
 246              	.L11:
 247              		.align	2
 248              	.L10:
 249 00d0 00380240 		.word	1073887232
 250 00d4 00700040 		.word	1073770496
 251              		.cfi_endproc
 252              	.LFE147:
 254              		.section	.text.MX_GPIO_Init,"ax",%progbits
 255              		.align	1
 256              		.syntax unified
 257              		.thumb
 258              		.thumb_func
 259              		.fpu fpv5-d16
 261              	MX_GPIO_Init:
 262              	.LFB148:
 185:Core/Src/main.c **** 
 186:Core/Src/main.c **** /**
 187:Core/Src/main.c ****   * @brief GPIO Initialization Function
 188:Core/Src/main.c ****   * @param None
 189:Core/Src/main.c ****   * @retval None
 190:Core/Src/main.c ****   */
 191:Core/Src/main.c **** static void MX_GPIO_Init(void)
 192:Core/Src/main.c **** {
 263              		.loc 1 192 1
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 40
 266              		@ frame_needed = 1, uses_anonymous_args = 0
 267 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccUIlO01.s 			page 9


 268              	.LCFI8:
 269              		.cfi_def_cfa_offset 8
 270              		.cfi_offset 7, -8
 271              		.cfi_offset 14, -4
 272 0002 8AB0     		sub	sp, sp, #40
 273              	.LCFI9:
 274              		.cfi_def_cfa_offset 48
 275 0004 00AF     		add	r7, sp, #0
 276              	.LCFI10:
 277              		.cfi_def_cfa_register 7
 193:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 278              		.loc 1 193 20
 279 0006 07F11403 		add	r3, r7, #20
 280 000a 0022     		movs	r2, #0
 281 000c 1A60     		str	r2, [r3]
 282 000e 5A60     		str	r2, [r3, #4]
 283 0010 9A60     		str	r2, [r3, #8]
 284 0012 DA60     		str	r2, [r3, #12]
 285 0014 1A61     		str	r2, [r3, #16]
 286              	.LBB6:
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 196:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 287              		.loc 1 196 3
 288 0016 2A4B     		ldr	r3, .L13
 289 0018 1B6B     		ldr	r3, [r3, #48]
 290 001a 294A     		ldr	r2, .L13
 291 001c 43F00403 		orr	r3, r3, #4
 292 0020 1363     		str	r3, [r2, #48]
 293 0022 274B     		ldr	r3, .L13
 294 0024 1B6B     		ldr	r3, [r3, #48]
 295 0026 03F00403 		and	r3, r3, #4
 296 002a 3B61     		str	r3, [r7, #16]
 297 002c 3B69     		ldr	r3, [r7, #16]
 298              	.LBE6:
 299              	.LBB7:
 197:Core/Src/main.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 300              		.loc 1 197 3
 301 002e 244B     		ldr	r3, .L13
 302 0030 1B6B     		ldr	r3, [r3, #48]
 303 0032 234A     		ldr	r2, .L13
 304 0034 43F01003 		orr	r3, r3, #16
 305 0038 1363     		str	r3, [r2, #48]
 306 003a 214B     		ldr	r3, .L13
 307 003c 1B6B     		ldr	r3, [r3, #48]
 308 003e 03F01003 		and	r3, r3, #16
 309 0042 FB60     		str	r3, [r7, #12]
 310 0044 FB68     		ldr	r3, [r7, #12]
 311              	.LBE7:
 312              	.LBB8:
 198:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 313              		.loc 1 198 3
 314 0046 1E4B     		ldr	r3, .L13
 315 0048 1B6B     		ldr	r3, [r3, #48]
 316 004a 1D4A     		ldr	r2, .L13
 317 004c 43F00203 		orr	r3, r3, #2
 318 0050 1363     		str	r3, [r2, #48]
ARM GAS  /tmp/ccUIlO01.s 			page 10


 319 0052 1B4B     		ldr	r3, .L13
 320 0054 1B6B     		ldr	r3, [r3, #48]
 321 0056 03F00203 		and	r3, r3, #2
 322 005a BB60     		str	r3, [r7, #8]
 323 005c BB68     		ldr	r3, [r7, #8]
 324              	.LBE8:
 325              	.LBB9:
 199:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 326              		.loc 1 199 3
 327 005e 184B     		ldr	r3, .L13
 328 0060 1B6B     		ldr	r3, [r3, #48]
 329 0062 174A     		ldr	r2, .L13
 330 0064 43F00103 		orr	r3, r3, #1
 331 0068 1363     		str	r3, [r2, #48]
 332 006a 154B     		ldr	r3, .L13
 333 006c 1B6B     		ldr	r3, [r3, #48]
 334 006e 03F00103 		and	r3, r3, #1
 335 0072 7B60     		str	r3, [r7, #4]
 336 0074 7B68     		ldr	r3, [r7, #4]
 337              	.LBE9:
 338              	.LBB10:
 200:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 339              		.loc 1 200 3
 340 0076 124B     		ldr	r3, .L13
 341 0078 1B6B     		ldr	r3, [r3, #48]
 342 007a 114A     		ldr	r2, .L13
 343 007c 43F00803 		orr	r3, r3, #8
 344 0080 1363     		str	r3, [r2, #48]
 345 0082 0F4B     		ldr	r3, .L13
 346 0084 1B6B     		ldr	r3, [r3, #48]
 347 0086 03F00803 		and	r3, r3, #8
 348 008a 3B60     		str	r3, [r7]
 349 008c 3B68     		ldr	r3, [r7]
 350              	.LBE10:
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 203:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 351              		.loc 1 203 3
 352 008e 0022     		movs	r2, #0
 353 0090 4FF40051 		mov	r1, #8192
 354 0094 0B48     		ldr	r0, .L13+4
 355 0096 FFF7FEFF 		bl	HAL_GPIO_WritePin
 204:Core/Src/main.c **** 
 205:Core/Src/main.c ****   /*Configure GPIO pin : PC13 */
 206:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
 356              		.loc 1 206 23
 357 009a 4FF40053 		mov	r3, #8192
 358 009e 7B61     		str	r3, [r7, #20]
 207:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 359              		.loc 1 207 24
 360 00a0 0123     		movs	r3, #1
 361 00a2 BB61     		str	r3, [r7, #24]
 208:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 362              		.loc 1 208 24
 363 00a4 0023     		movs	r3, #0
 364 00a6 FB61     		str	r3, [r7, #28]
 209:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
ARM GAS  /tmp/ccUIlO01.s 			page 11


 365              		.loc 1 209 25
 366 00a8 0023     		movs	r3, #0
 367 00aa 3B62     		str	r3, [r7, #32]
 210:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 368              		.loc 1 210 3
 369 00ac 07F11403 		add	r3, r7, #20
 370 00b0 1946     		mov	r1, r3
 371 00b2 0448     		ldr	r0, .L13+4
 372 00b4 FFF7FEFF 		bl	HAL_GPIO_Init
 211:Core/Src/main.c **** 
 212:Core/Src/main.c **** }
 373              		.loc 1 212 1
 374 00b8 00BF     		nop
 375 00ba 2837     		adds	r7, r7, #40
 376              	.LCFI11:
 377              		.cfi_def_cfa_offset 8
 378 00bc BD46     		mov	sp, r7
 379              	.LCFI12:
 380              		.cfi_def_cfa_register 13
 381              		@ sp needed
 382 00be 80BD     		pop	{r7, pc}
 383              	.L14:
 384              		.align	2
 385              	.L13:
 386 00c0 00380240 		.word	1073887232
 387 00c4 00080240 		.word	1073874944
 388              		.cfi_endproc
 389              	.LFE148:
 391              		.section	.text.StartDefaultTask,"ax",%progbits
 392              		.align	1
 393              		.global	StartDefaultTask
 394              		.syntax unified
 395              		.thumb
 396              		.thumb_func
 397              		.fpu fpv5-d16
 399              	StartDefaultTask:
 400              	.LFB149:
 213:Core/Src/main.c **** 
 214:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 215:Core/Src/main.c **** 
 216:Core/Src/main.c **** /* USER CODE END 4 */
 217:Core/Src/main.c **** 
 218:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 219:Core/Src/main.c **** /**
 220:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 221:Core/Src/main.c ****   * @param  argument: Not used
 222:Core/Src/main.c ****   * @retval None
 223:Core/Src/main.c ****   */
 224:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 225:Core/Src/main.c **** void StartDefaultTask(void const * argument)
 226:Core/Src/main.c **** {
 401              		.loc 1 226 1
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 8
 404              		@ frame_needed = 1, uses_anonymous_args = 0
 405 0000 80B5     		push	{r7, lr}
 406              	.LCFI13:
ARM GAS  /tmp/ccUIlO01.s 			page 12


 407              		.cfi_def_cfa_offset 8
 408              		.cfi_offset 7, -8
 409              		.cfi_offset 14, -4
 410 0002 82B0     		sub	sp, sp, #8
 411              	.LCFI14:
 412              		.cfi_def_cfa_offset 16
 413 0004 00AF     		add	r7, sp, #0
 414              	.LCFI15:
 415              		.cfi_def_cfa_register 7
 416 0006 7860     		str	r0, [r7, #4]
 417              	.L16:
 227:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 228:Core/Src/main.c ****   /* Infinite loop */
 229:Core/Src/main.c ****   for(;;)
 230:Core/Src/main.c ****   {
 231:Core/Src/main.c ****     osDelay(1);
 418              		.loc 1 231 5 discriminator 1
 419 0008 0120     		movs	r0, #1
 420 000a FFF7FEFF 		bl	osDelay
 421 000e FBE7     		b	.L16
 422              		.cfi_endproc
 423              	.LFE149:
 425              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 426              		.align	1
 427              		.global	HAL_TIM_PeriodElapsedCallback
 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 431              		.fpu fpv5-d16
 433              	HAL_TIM_PeriodElapsedCallback:
 434              	.LFB150:
 232:Core/Src/main.c ****   }
 233:Core/Src/main.c ****   /* USER CODE END 5 */
 234:Core/Src/main.c **** }
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****  /**
 237:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 238:Core/Src/main.c ****   * @note   This function is called  when TIM7 interrupt took place, inside
 239:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 240:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 241:Core/Src/main.c ****   * @param  htim : TIM handle
 242:Core/Src/main.c ****   * @retval None
 243:Core/Src/main.c ****   */
 244:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 245:Core/Src/main.c **** {
 435              		.loc 1 245 1
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 8
 438              		@ frame_needed = 1, uses_anonymous_args = 0
 439 0000 80B5     		push	{r7, lr}
 440              	.LCFI16:
 441              		.cfi_def_cfa_offset 8
 442              		.cfi_offset 7, -8
 443              		.cfi_offset 14, -4
 444 0002 82B0     		sub	sp, sp, #8
 445              	.LCFI17:
 446              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccUIlO01.s 			page 13


 447 0004 00AF     		add	r7, sp, #0
 448              	.LCFI18:
 449              		.cfi_def_cfa_register 7
 450 0006 7860     		str	r0, [r7, #4]
 246:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 249:Core/Src/main.c ****   if (htim->Instance == TIM7) {
 451              		.loc 1 249 11
 452 0008 7B68     		ldr	r3, [r7, #4]
 453 000a 1B68     		ldr	r3, [r3]
 454              		.loc 1 249 6
 455 000c 044A     		ldr	r2, .L20
 456 000e 9342     		cmp	r3, r2
 457 0010 01D1     		bne	.L19
 250:Core/Src/main.c ****     HAL_IncTick();
 458              		.loc 1 250 5
 459 0012 FFF7FEFF 		bl	HAL_IncTick
 460              	.L19:
 251:Core/Src/main.c ****   }
 252:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 255:Core/Src/main.c **** }
 461              		.loc 1 255 1
 462 0016 00BF     		nop
 463 0018 0837     		adds	r7, r7, #8
 464              	.LCFI19:
 465              		.cfi_def_cfa_offset 8
 466 001a BD46     		mov	sp, r7
 467              	.LCFI20:
 468              		.cfi_def_cfa_register 13
 469              		@ sp needed
 470 001c 80BD     		pop	{r7, pc}
 471              	.L21:
 472 001e 00BF     		.align	2
 473              	.L20:
 474 0020 00140040 		.word	1073746944
 475              		.cfi_endproc
 476              	.LFE150:
 478              		.section	.text.Error_Handler,"ax",%progbits
 479              		.align	1
 480              		.global	Error_Handler
 481              		.syntax unified
 482              		.thumb
 483              		.thumb_func
 484              		.fpu fpv5-d16
 486              	Error_Handler:
 487              	.LFB151:
 256:Core/Src/main.c **** 
 257:Core/Src/main.c **** /**
 258:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 259:Core/Src/main.c ****   * @retval None
 260:Core/Src/main.c ****   */
 261:Core/Src/main.c **** void Error_Handler(void)
 262:Core/Src/main.c **** {
 488              		.loc 1 262 1
ARM GAS  /tmp/ccUIlO01.s 			page 14


 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 0
 491              		@ frame_needed = 1, uses_anonymous_args = 0
 492              		@ link register save eliminated.
 493 0000 80B4     		push	{r7}
 494              	.LCFI21:
 495              		.cfi_def_cfa_offset 4
 496              		.cfi_offset 7, -4
 497 0002 00AF     		add	r7, sp, #0
 498              	.LCFI22:
 499              		.cfi_def_cfa_register 7
 500              	.LBB11:
 501              	.LBB12:
 502              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
ARM GAS  /tmp/ccUIlO01.s 			page 15


  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
ARM GAS  /tmp/ccUIlO01.s 			page 16


 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 503              		.loc 2 142 3
 504              		.syntax unified
 505              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 506 0004 72B6     		cpsid i
 507              	@ 0 "" 2
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508              		.loc 2 143 1
 509              		.thumb
 510              		.syntax unified
 511 0006 00BF     		nop
 512              	.L23:
 513              	.LBE12:
 514              	.LBE11:
 263:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 264:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
ARM GAS  /tmp/ccUIlO01.s 			page 17


 265:Core/Src/main.c ****   __disable_irq();
 266:Core/Src/main.c ****   while (1)
 515              		.loc 1 266 9 discriminator 1
 516 0008 FEE7     		b	.L23
 517              		.cfi_endproc
 518              	.LFE151:
 520              		.text
 521              	.Letext0:
 522              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 523              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 524              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 525              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f765xx.h"
 526              		.file 7 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 527              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc_ex.h"
 528              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
 529              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 530              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 531              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 532              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 533              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
 534              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 535              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 536              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
ARM GAS  /tmp/ccUIlO01.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccUIlO01.s:14     .rodata:0000000000000000 $d
                            *COM*:0000000000000004 defaultTaskHandle
     /tmp/ccUIlO01.s:399    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccUIlO01.s:33     .text.main:0000000000000000 $t
     /tmp/ccUIlO01.s:41     .text.main:0000000000000000 main
     /tmp/ccUIlO01.s:105    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccUIlO01.s:261    .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccUIlO01.s:92     .text.main:000000000000003c $d
     /tmp/ccUIlO01.s:98     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccUIlO01.s:486    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccUIlO01.s:249    .text.SystemClock_Config:00000000000000d0 $d
     /tmp/ccUIlO01.s:255    .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccUIlO01.s:386    .text.MX_GPIO_Init:00000000000000c0 $d
     /tmp/ccUIlO01.s:392    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccUIlO01.s:426    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccUIlO01.s:433    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccUIlO01.s:474    .text.HAL_TIM_PeriodElapsedCallback:0000000000000020 $d
     /tmp/ccUIlO01.s:479    .text.Error_Handler:0000000000000000 $t

UNDEFINED SYMBOLS
HAL_Init
osThreadCreate
osKernelStart
memset
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_GPIO_WritePin
HAL_GPIO_Init
osDelay
HAL_IncTick
